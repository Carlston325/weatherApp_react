{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\crebe\\\\Documents\\\\WEB DEVELOPMENT COURSE PROJECTS\\\\__MY_PROJECTS__\\\\weather_react\\\\src\\\\Weather.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport apiKeys from \"./apiKeys\";\nimport { locationApiKey } from \"./apiKeys\";\nimport Clock from \"react-live-clock\";\nimport loader from \"./images/WeatherIcons.gif\";\nimport ReactAnimatedWeather from \"react-animated-weather\";\nimport Forcast from \"./forcast\";\nfunction Weather() {\n  const [query, setQuery] = useState(\"\");\n  const [location, setLocation] = useState({\n    place: undefined,\n    lat: undefined,\n    lon: undefined\n  });\n  const [error, setError] = useState(\"\");\n  async function search(input) {\n    setQuery(input);\n    try {\n      const response = await axios.get(`${locationApiKey.base}search?key=${locationApiKey.key}&q=${query}&format=json&`);\n      const result = response.data[0];\n      setLocation({\n        place: result.display_name,\n        lat: result.lat,\n        lon: result.lon\n      });\n      setQuery(\"\");\n      console.log(result);\n    } catch (error) {\n      console.log(error);\n      setQuery(\"\");\n      setError({\n        message: \"Not Found\",\n        query: query\n      });\n    }\n  }\n  function dateBuilder(d) {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n    return `${day}, ${date} ${month} ${year}`;\n  }\n  const defaults = {\n    color: \"white\",\n    size: 112,\n    animate: true\n  };\n  const [state, setState] = useState({\n    lat: undefined,\n    lon: undefined,\n    city: undefined,\n    countryCode: undefined,\n    description: undefined,\n    temperatureC: undefined,\n    temperatureF: undefined,\n    wind: {\n      speed: undefined,\n      gust: undefined,\n      direction: undefined\n    },\n    humidity: undefined,\n    visibility: undefined,\n    icon: \"CLEAR_DAY\",\n    sunrise: undefined,\n    sunset: undefined,\n    errorMsg: undefined,\n    errorMessage: undefined\n  });\n  let currentLocation = false;\n\n  // useEffect(() => {\n  //   // GET USER LOCATION\n  //   const getPosition = () => {\n  //     return new Promise((resolve, reject) => {\n  //       navigator.geolocation.getCurrentPosition(resolve, reject);\n  //     });\n  //   };\n\n  //   if (navigator.geolocation) {\n  //     getPosition()\n  //       //If user allow location service then will fetch data & send it to get-weather function.\n  //       .then((position) => {\n  //         setLat(position.coords.latitude);\n  //         setLon(position.coords.longitude);\n  //       })\n  //       .catch((err) => {\n  //         //If user denied location service then standard location weather will le shown on basis of latitude & latitude.\n  //         setLat(28.67);\n  //         setLon(77.22);\n  //         alert(\n  //           \"You have disabled location service. Allow 'This APP' to access your location. Your current location will be used for calculating Real time weather.\"\n  //         );\n  //       });\n  //   } else {\n  //     alert(\"Geolocation not available\");\n  //   }\n  // });\n\n  useEffect(() => {\n    const getWeather = async () => {\n      try {\n        const response = await axios.get(`${apiKeys.base}current?lat=${location.lat}&lon=${location.lon}&key=${apiKeys.key}`);\n        const result = response.data;\n        setState({\n          lat: result.lat,\n          lon: result.lon,\n          city: result.city_name,\n          countryCode: result.country_code,\n          description: result.weather.description,\n          temperatureC: Math.round(result.temp),\n          temperatureF: Math.round(result.temp * 1.8 + 32),\n          wind: {\n            speed: result.wind_spd,\n            gust: result.gust,\n            direction: result.wind_dir\n          },\n          humidity: result.rh,\n          visibility: result.vis\n        });\n        console.log(result);\n      } catch (error) {\n        console.log(error.message);\n      }\n      switch (state.description) {\n        case \"Clear sky\":\n          setState({\n            icon: \"CLEAR_DAY\"\n          });\n          break;\n        case \"Few clouds\":\n          setState({\n            icon: \"PARTLY_CLOUDY_DAY\"\n          });\n          break;\n        case \"Broken clouds\":\n          setState({\n            icon: \"CLOUDY\"\n          });\n          break;\n        case \"Moderate Rain\":\n          setState({\n            icon: \"RAIN\"\n          });\n          break;\n        case \"Snow\":\n          setState({\n            icon: \"SNOW\"\n          });\n          break;\n        case \"Heavy sleet\":\n          setState({\n            icon: \"WIND\"\n          });\n          break;\n        case \"Sleet\":\n          setState({\n            icon: \"SLEET\"\n          });\n          break;\n        case \"Fog\":\n          setState({\n            icon: \"FOG\"\n          });\n          break;\n        case \"Haze\":\n          setState({\n            icon: \"FOG\"\n          });\n          break;\n        case \"Thunderstorm with rain\":\n          setState({\n            icon: \"WIND\"\n          });\n          break;\n        default:\n          setState({\n            icon: \"CLEAR_DAY\"\n          });\n      }\n    };\n  });\n  if (currentLocation) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"img\", {\n      src: loader,\n      style: {\n        width: \"50%\",\n        WebkitUserDrag: \"none\"\n      },\n      className: \"icon\",\n      alt: \"loader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"h3\", {\n      style: {\n        color: \"white\",\n        fontSize: \"22px\",\n        fontWeight: \"600\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }\n    }, \"Detecting your location\"), /*#__PURE__*/React.createElement(\"h3\", {\n      style: {\n        color: \"white\",\n        marginTop: \"10px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }\n    }, \"Your current location wil be displayed on the App \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 61\n      }\n    }), \" & used for calculating Real time weather.\"));\n  } else {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"city\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 13\n      }\n    }, state.city), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 13\n      }\n    }, state.country)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"mb-icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(ReactAnimatedWeather, {\n      icon: state.icon,\n      color: defaults.color,\n      size: defaults.size,\n      animate: defaults.animate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 13\n      }\n    }, state.main)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"date-time\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"dmy\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"txt\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"current-time\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Clock, {\n      format: \"HH:mm:ss\",\n      interval: 1000,\n      ticking: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"current-date\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 15\n      }\n    }, dateBuilder(new Date()))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"temperature\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 15\n      }\n    }, state.temperatureC, \"\\xB0\", /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 38\n      }\n    }, \"C\"))))), /*#__PURE__*/React.createElement(Forcast, {\n      icon: state.icon,\n      weather: getWeather(),\n      searchPlace: search,\n      location: state,\n      query: query,\n      error: error,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }\n    }));\n  }\n}\nexport default Weather;","map":{"version":3,"names":["React","useEffect","useState","axios","apiKeys","locationApiKey","Clock","loader","ReactAnimatedWeather","Forcast","Weather","query","setQuery","location","setLocation","place","undefined","lat","lon","error","setError","search","input","response","get","base","key","result","data","display_name","console","log","message","dateBuilder","d","months","days","day","getDay","date","getDate","month","getMonth","year","getFullYear","defaults","color","size","animate","state","setState","city","countryCode","description","temperatureC","temperatureF","wind","speed","gust","direction","humidity","visibility","icon","sunrise","sunset","errorMsg","errorMessage","currentLocation","getWeather","city_name","country_code","weather","Math","round","temp","wind_spd","wind_dir","rh","vis","createElement","Fragment","src","style","width","WebkitUserDrag","className","alt","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","fontSize","fontWeight","marginTop","country","main","id","format","interval","ticking","Date","searchPlace"],"sources":["C:/Users/crebe/Documents/WEB DEVELOPMENT COURSE PROJECTS/__MY_PROJECTS__/weather_react/src/Weather.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport apiKeys from \"./apiKeys\";\r\nimport { locationApiKey } from \"./apiKeys\";\r\nimport Clock from \"react-live-clock\";\r\nimport loader from \"./images/WeatherIcons.gif\";\r\nimport ReactAnimatedWeather from \"react-animated-weather\";\r\nimport Forcast from \"./forcast\";\r\n\r\nfunction Weather() {\r\n  const [query, setQuery] = useState(\"\");\r\n  const [location, setLocation] = useState({\r\n    place: undefined,\r\n    lat: undefined,\r\n    lon: undefined,\r\n  });\r\n  const [error, setError] = useState(\"\");\r\n\r\n  async function search(input) {\r\n    setQuery(input);\r\n    try {\r\n      const response = await axios.get(\r\n        `${locationApiKey.base}search?key=${locationApiKey.key}&q=${query}&format=json&`\r\n      );\r\n      const result = response.data[0];\r\n      setLocation({\r\n        place: result.display_name,\r\n        lat: result.lat,\r\n        lon: result.lon,\r\n      });\r\n      setQuery(\"\");\r\n      console.log(result);\r\n    } catch (error) {\r\n      console.log(error);\r\n      setQuery(\"\");\r\n      setError({ message: \"Not Found\", query: query });\r\n    }\r\n  }\r\n\r\n  function dateBuilder(d) {\r\n    let months = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\",\r\n    ];\r\n\r\n    let days = [\r\n      \"Sunday\",\r\n      \"Monday\",\r\n      \"Tuesday\",\r\n      \"Wednesday\",\r\n      \"Thursday\",\r\n      \"Friday\",\r\n      \"Saturday\",\r\n    ];\r\n\r\n    let day = days[d.getDay()];\r\n    let date = d.getDate();\r\n    let month = months[d.getMonth()];\r\n    let year = d.getFullYear();\r\n\r\n    return `${day}, ${date} ${month} ${year}`;\r\n  }\r\n\r\n  const defaults = {\r\n    color: \"white\",\r\n    size: 112,\r\n    animate: true,\r\n  };\r\n\r\n  const [state, setState] = useState({\r\n    lat: undefined,\r\n    lon: undefined,\r\n    city: undefined,\r\n    countryCode: undefined,\r\n    description: undefined,\r\n    temperatureC: undefined,\r\n    temperatureF: undefined,\r\n    wind: {\r\n      speed: undefined,\r\n      gust: undefined,\r\n      direction: undefined,\r\n    },\r\n    humidity: undefined,\r\n    visibility: undefined,\r\n    icon: \"CLEAR_DAY\",\r\n    sunrise: undefined,\r\n    sunset: undefined,\r\n    errorMsg: undefined,\r\n    errorMessage: undefined,\r\n  });\r\n\r\n  let currentLocation = false;\r\n\r\n  // useEffect(() => {\r\n  //   // GET USER LOCATION\r\n  //   const getPosition = () => {\r\n  //     return new Promise((resolve, reject) => {\r\n  //       navigator.geolocation.getCurrentPosition(resolve, reject);\r\n  //     });\r\n  //   };\r\n\r\n  //   if (navigator.geolocation) {\r\n  //     getPosition()\r\n  //       //If user allow location service then will fetch data & send it to get-weather function.\r\n  //       .then((position) => {\r\n  //         setLat(position.coords.latitude);\r\n  //         setLon(position.coords.longitude);\r\n  //       })\r\n  //       .catch((err) => {\r\n  //         //If user denied location service then standard location weather will le shown on basis of latitude & latitude.\r\n  //         setLat(28.67);\r\n  //         setLon(77.22);\r\n  //         alert(\r\n  //           \"You have disabled location service. Allow 'This APP' to access your location. Your current location will be used for calculating Real time weather.\"\r\n  //         );\r\n  //       });\r\n  //   } else {\r\n  //     alert(\"Geolocation not available\");\r\n  //   }\r\n  // });\r\n\r\n  useEffect(() => {\r\n    const getWeather = async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          `${apiKeys.base}current?lat=${location.lat}&lon=${location.lon}&key=${apiKeys.key}`\r\n        );\r\n        const result = response.data;\r\n        setState({\r\n          lat: result.lat,\r\n          lon: result.lon,\r\n          city: result.city_name,\r\n          countryCode: result.country_code,\r\n          description: result.weather.description,\r\n          temperatureC: Math.round(result.temp),\r\n          temperatureF: Math.round(result.temp * 1.8 + 32),\r\n          wind: {\r\n            speed: result.wind_spd,\r\n            gust: result.gust,\r\n            direction: result.wind_dir,\r\n          },\r\n          humidity: result.rh,\r\n          visibility: result.vis,\r\n        });\r\n        console.log(result);\r\n      } catch (error) {\r\n        console.log(error.message);\r\n      }\r\n\r\n      switch (state.description) {\r\n        case \"Clear sky\":\r\n          setState({ icon: \"CLEAR_DAY\" });\r\n          break;\r\n        case \"Few clouds\":\r\n          setState({ icon: \"PARTLY_CLOUDY_DAY\" });\r\n          break;\r\n        case \"Broken clouds\":\r\n          setState({ icon: \"CLOUDY\" });\r\n          break;\r\n        case \"Moderate Rain\":\r\n          setState({ icon: \"RAIN\" });\r\n          break;\r\n        case \"Snow\":\r\n          setState({ icon: \"SNOW\" });\r\n          break;\r\n        case \"Heavy sleet\":\r\n          setState({ icon: \"WIND\" });\r\n          break;\r\n        case \"Sleet\":\r\n          setState({ icon: \"SLEET\" });\r\n          break;\r\n        case \"Fog\":\r\n          setState({ icon: \"FOG\" });\r\n          break;\r\n        case \"Haze\":\r\n          setState({ icon: \"FOG\" });\r\n          break;\r\n        case \"Thunderstorm with rain\":\r\n          setState({ icon: \"WIND\" });\r\n          break;\r\n        default:\r\n          setState({ icon: \"CLEAR_DAY\" });\r\n      }\r\n    };\r\n  });\r\n\r\n  if (currentLocation) {\r\n    return (\r\n      <>\r\n        <img\r\n          src={loader}\r\n          style={{ width: \"50%\", WebkitUserDrag: \"none\" }}\r\n          className=\"icon\"\r\n          alt=\"loader\"\r\n        />\r\n        <h3 style={{ color: \"white\", fontSize: \"22px\", fontWeight: \"600\" }}>\r\n          Detecting your location\r\n        </h3>\r\n        <h3 style={{ color: \"white\", marginTop: \"10px\" }}>\r\n          Your current location wil be displayed on the App <br></br> & used for\r\n          calculating Real time weather.\r\n        </h3>\r\n      </>\r\n    );\r\n  } else {\r\n    return (\r\n      <>\r\n        <div className=\"city\">\r\n          <div className=\"title\">\r\n            <h2>{state.city}</h2>\r\n            <h3>{state.country}</h3>\r\n          </div>\r\n          <div className=\"mb-icon\">\r\n            <ReactAnimatedWeather\r\n              icon={state.icon}\r\n              color={defaults.color}\r\n              size={defaults.size}\r\n              animate={defaults.animate}\r\n            />\r\n            <p>{state.main}</p>\r\n          </div>\r\n          <div className=\"date-time\">\r\n            <div className=\"dmy\">\r\n              <div id=\"txt\"></div>\r\n              <div className=\"current-time\">\r\n                <Clock format=\"HH:mm:ss\" interval={1000} ticking={true} />\r\n              </div>\r\n              <div className=\"current-date\">{dateBuilder(new Date())}</div>\r\n            </div>\r\n            <div className=\"temperature\">\r\n              <p>\r\n                {state.temperatureC}°<span>C</span>\r\n              </p>\r\n              {/* <span className=\"slash\">/</span>\r\n                {state.temperatureF} &deg;F */}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <Forcast\r\n          icon={state.icon}\r\n          weather={getWeather()}\r\n          searchPlace={search}\r\n          location={state}\r\n          query={query}\r\n          error={error}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Weather;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}