{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\crebe\\\\Documents\\\\WEB DEVELOPMENT COURSE PROJECTS\\\\__MY_PROJECTS__\\\\weather_react\\\\src\\\\Weather.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport apiKeys from \"./apiKeys\";\nimport Clock from \"react-live-clock\";\nimport loader from \"./images/WeatherIcons.gif\";\nimport ReactAnimatedWeather from \"react-animated-weather\";\nimport Forcast from \"./forcast\";\nfunction Weather() {\n  function dateBuilder(d) {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n    return `${day}, ${date} ${month} ${year}`;\n  }\n  const defaults = {\n    color: \"white\",\n    size: 112,\n    animate: true\n  };\n  const [state, setState] = useState({\n    lat: undefined,\n    lon: undefined,\n    city: undefined,\n    countryCode: undefined,\n    description: undefined,\n    temperatureC: undefined,\n    temperatureF: undefined,\n    wind: {\n      speed: undefined,\n      gust: undefined,\n      direction: undefined\n    },\n    humidity: undefined,\n    visibility: undefined,\n    icon: \"CLEAR_DAY\",\n    sunrise: undefined,\n    sunset: undefined,\n    errorMsg: undefined,\n    errorMessage: undefined\n  });\n  let currentLocation = false;\n  const [lat, setLat] = useState(undefined);\n  const [lon, setLon] = useState(undefined);\n  useEffect(() => {\n    // GET USER LOCATION\n    const getPosition = () => {\n      return new Promise((resolve, reject) => {\n        navigator.geolocation.getCurrentPosition(resolve, reject);\n      });\n    };\n    if (navigator.geolocation) {\n      getPosition()\n      //If user allow location service then will fetch data & send it to get-weather function.\n      .then(position => {\n        setLat(position.coords.latitude);\n        setLon(position.coords.longitude);\n      }).catch(err => {\n        //If user denied location service then standard location weather will le shown on basis of latitude & latitude.\n        setLat(28.67);\n        setLon(77.22);\n        alert(\"You have disabled location service. Allow 'This APP' to access your location. Your current location will be used for calculating Real time weather.\");\n      });\n    } else {\n      alert(\"Geolocation not available\");\n    }\n  });\n  useEffect(() => {\n    const getWeather = async () => {\n      try {\n        const response = await axios.get(`${apiKeys.base}current?lat=${lat}&lon=${lon}&key=${apiKeys.key}`);\n        const result = response.data;\n        setState({\n          lat: result.lat,\n          lon: result.lon,\n          city: result.city_name,\n          country: result.country_code,\n          description: result.weather.description,\n          temperatureC: Math.round(result.temp),\n          temperatureF: Math.round(result.temp * 1.8 + 32),\n          wind: {\n            speed: result.wind_spd,\n            gust: result.gust,\n            direction: result.wind_dir\n          },\n          humidity: result.rh,\n          visibility: result.vis\n        });\n        console.log(result);\n      } catch (error) {\n        console.log(error.message);\n      }\n      setTimeout(getWeather(), 600000);\n      switch (state.description) {\n        case \"Clear sky\":\n          setState({\n            icon: \"CLEAR_DAY\"\n          });\n          break;\n        case \"Few clouds\":\n          setState({\n            icon: \"PARTLY_CLOUDY_DAY\"\n          });\n          break;\n        case \"Broken clouds\":\n          setState({\n            icon: \"CLOUDY\"\n          });\n          break;\n        case \"Moderate Rain\":\n          setState({\n            icon: \"RAIN\"\n          });\n          break;\n        case \"Snow\":\n          setState({\n            icon: \"SNOW\"\n          });\n          break;\n        case \"Heavy sleet\":\n          setState({\n            icon: \"WIND\"\n          });\n          break;\n        case \"Sleet\":\n          setState({\n            icon: \"SLEET\"\n          });\n          break;\n        case \"Fog\":\n          setState({\n            icon: \"FOG\"\n          });\n          break;\n        case \"Haze\":\n          setState({\n            icon: \"FOG\"\n          });\n          break;\n        case \"Thunderstorm with rain\":\n          setState({\n            icon: \"WIND\"\n          });\n          break;\n        default:\n          setState({\n            icon: \"CLEAR_DAY\"\n          });\n      }\n    };\n  });\n  if (currentLocation) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"img\", {\n      src: loader,\n      style: {\n        width: \"50%\",\n        WebkitUserDrag: \"none\"\n      },\n      className: \"icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"h3\", {\n      style: {\n        color: \"white\",\n        fontSize: \"22px\",\n        fontWeight: \"600\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }\n    }, \"Detecting your location\"), /*#__PURE__*/React.createElement(\"h3\", {\n      style: {\n        color: \"white\",\n        marginTop: \"10px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }\n    }, \"Your current location wil be displayed on the App \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 61\n      }\n    }), \" & used for calculating Real time weather.\"));\n  } else {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"city\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 13\n      }\n    }, state.city), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 13\n      }\n    }, state.country)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"mb-icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(ReactAnimatedWeather, {\n      icon: state.icon,\n      color: defaults.color,\n      size: defaults.size,\n      animate: defaults.animate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 13\n      }\n    }, state.main)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"date-time\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"dmy\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"txt\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"current-time\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Clock, {\n      format: \"HH:mm:ss\",\n      interval: 1000,\n      ticking: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"current-date\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 15\n      }\n    }, dateBuilder(new Date()))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"temperature\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 15\n      }\n    }, state.temperatureC, \"\\xB0\", /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 38\n      }\n    }, \"C\"))))), /*#__PURE__*/React.createElement(Forcast, {\n      icon: state.icon,\n      weather: state,\n      lat: lat,\n      lon: lon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }\n    }));\n  }\n}\nexport default Weather;","map":{"version":3,"names":["React","useEffect","useState","axios","apiKeys","Clock","loader","ReactAnimatedWeather","Forcast","Weather","dateBuilder","d","months","days","day","getDay","date","getDate","month","getMonth","year","getFullYear","defaults","color","size","animate","state","setState","lat","undefined","lon","city","countryCode","description","temperatureC","temperatureF","wind","speed","gust","direction","humidity","visibility","icon","sunrise","sunset","errorMsg","errorMessage","currentLocation","setLat","setLon","getPosition","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","then","position","coords","latitude","longitude","catch","err","alert","getWeather","response","get","base","key","result","data","city_name","country","country_code","weather","Math","round","temp","wind_spd","wind_dir","rh","vis","console","log","error","message","setTimeout","createElement","Fragment","src","style","width","WebkitUserDrag","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","fontSize","fontWeight","marginTop","main","id","format","interval","ticking","Date"],"sources":["C:/Users/crebe/Documents/WEB DEVELOPMENT COURSE PROJECTS/__MY_PROJECTS__/weather_react/src/Weather.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport apiKeys from \"./apiKeys\";\r\nimport Clock from \"react-live-clock\";\r\nimport loader from \"./images/WeatherIcons.gif\";\r\nimport ReactAnimatedWeather from \"react-animated-weather\";\r\nimport Forcast from \"./forcast\";\r\n\r\nfunction Weather() {\r\n  function dateBuilder(d) {\r\n    let months = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\",\r\n    ];\r\n\r\n    let days = [\r\n      \"Sunday\",\r\n      \"Monday\",\r\n      \"Tuesday\",\r\n      \"Wednesday\",\r\n      \"Thursday\",\r\n      \"Friday\",\r\n      \"Saturday\",\r\n    ];\r\n\r\n    let day = days[d.getDay()];\r\n    let date = d.getDate();\r\n    let month = months[d.getMonth()];\r\n    let year = d.getFullYear();\r\n\r\n    return `${day}, ${date} ${month} ${year}`;\r\n  }\r\n\r\n  const defaults = {\r\n    color: \"white\",\r\n    size: 112,\r\n    animate: true,\r\n  };\r\n\r\n  const [state, setState] = useState({\r\n    lat: undefined,\r\n    lon: undefined,\r\n    city: undefined,\r\n    countryCode: undefined,\r\n    description: undefined,\r\n    temperatureC: undefined,\r\n    temperatureF: undefined,\r\n    wind: {\r\n      speed: undefined,\r\n      gust: undefined,\r\n      direction: undefined,\r\n    },\r\n    humidity: undefined,\r\n    visibility: undefined,\r\n    icon: \"CLEAR_DAY\",\r\n    sunrise: undefined,\r\n    sunset: undefined,\r\n    errorMsg: undefined,\r\n    errorMessage: undefined,\r\n  });\r\n\r\n  let currentLocation = false;\r\n  const [lat, setLat] = useState(undefined);\r\n  const [lon, setLon] = useState(undefined);\r\n\r\n  useEffect(() => {\r\n    // GET USER LOCATION\r\n    const getPosition = () => {\r\n      return new Promise((resolve, reject) => {\r\n        navigator.geolocation.getCurrentPosition(resolve, reject);\r\n      });\r\n    };\r\n\r\n    if (navigator.geolocation) {\r\n      getPosition()\r\n        //If user allow location service then will fetch data & send it to get-weather function.\r\n        .then((position) => {\r\n          setLat(position.coords.latitude);\r\n          setLon(position.coords.longitude);\r\n        })\r\n        .catch((err) => {\r\n          //If user denied location service then standard location weather will le shown on basis of latitude & latitude.\r\n          setLat(28.67);\r\n          setLon(77.22);\r\n          alert(\r\n            \"You have disabled location service. Allow 'This APP' to access your location. Your current location will be used for calculating Real time weather.\"\r\n          );\r\n        });\r\n    } else {\r\n      alert(\"Geolocation not available\");\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    const getWeather = async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          `${apiKeys.base}current?lat=${lat}&lon=${lon}&key=${apiKeys.key}`\r\n        );\r\n        const result = response.data;\r\n        setState({\r\n          lat: result.lat,\r\n          lon: result.lon,\r\n          city: result.city_name,\r\n          country: result.country_code,\r\n          description: result.weather.description,\r\n          temperatureC: Math.round(result.temp),\r\n          temperatureF: Math.round(result.temp * 1.8 + 32),\r\n          wind: {\r\n            speed: result.wind_spd,\r\n            gust: result.gust,\r\n            direction: result.wind_dir,\r\n          },\r\n          humidity: result.rh,\r\n          visibility: result.vis,\r\n        });\r\n        console.log(result);\r\n      } catch (error) {\r\n        console.log(error.message);\r\n      }\r\n\r\n      setTimeout(getWeather(), 600000);\r\n      switch (state.description) {\r\n        case \"Clear sky\":\r\n          setState({ icon: \"CLEAR_DAY\" });\r\n          break;\r\n        case \"Few clouds\":\r\n          setState({ icon: \"PARTLY_CLOUDY_DAY\" });\r\n          break;\r\n        case \"Broken clouds\":\r\n          setState({ icon: \"CLOUDY\" });\r\n          break;\r\n        case \"Moderate Rain\":\r\n          setState({ icon: \"RAIN\" });\r\n          break;\r\n        case \"Snow\":\r\n          setState({ icon: \"SNOW\" });\r\n          break;\r\n        case \"Heavy sleet\":\r\n          setState({ icon: \"WIND\" });\r\n          break;\r\n        case \"Sleet\":\r\n          setState({ icon: \"SLEET\" });\r\n          break;\r\n        case \"Fog\":\r\n          setState({ icon: \"FOG\" });\r\n          break;\r\n        case \"Haze\":\r\n          setState({ icon: \"FOG\" });\r\n          break;\r\n        case \"Thunderstorm with rain\":\r\n          setState({ icon: \"WIND\" });\r\n          break;\r\n        default:\r\n          setState({ icon: \"CLEAR_DAY\" });\r\n      }\r\n    };\r\n  });\r\n\r\n  if (currentLocation) {\r\n    return (\r\n      <>\r\n        <img\r\n          src={loader}\r\n          style={{ width: \"50%\", WebkitUserDrag: \"none\" }}\r\n          className=\"icon\"\r\n        />\r\n        <h3 style={{ color: \"white\", fontSize: \"22px\", fontWeight: \"600\" }}>\r\n          Detecting your location\r\n        </h3>\r\n        <h3 style={{ color: \"white\", marginTop: \"10px\" }}>\r\n          Your current location wil be displayed on the App <br></br> & used for\r\n          calculating Real time weather.\r\n        </h3>\r\n      </>\r\n    );\r\n  } else {\r\n    return (\r\n      <>\r\n        <div className=\"city\">\r\n          <div className=\"title\">\r\n            <h2>{state.city}</h2>\r\n            <h3>{state.country}</h3>\r\n          </div>\r\n          <div className=\"mb-icon\">\r\n            <ReactAnimatedWeather\r\n              icon={state.icon}\r\n              color={defaults.color}\r\n              size={defaults.size}\r\n              animate={defaults.animate}\r\n            />\r\n            <p>{state.main}</p>\r\n          </div>\r\n          <div className=\"date-time\">\r\n            <div className=\"dmy\">\r\n              <div id=\"txt\"></div>\r\n              <div className=\"current-time\">\r\n                <Clock format=\"HH:mm:ss\" interval={1000} ticking={true} />\r\n              </div>\r\n              <div className=\"current-date\">{dateBuilder(new Date())}</div>\r\n            </div>\r\n            <div className=\"temperature\">\r\n              <p>\r\n                {state.temperatureC}°<span>C</span>\r\n              </p>\r\n              {/* <span className=\"slash\">/</span>\r\n                {state.temperatureF} &deg;F */}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <Forcast icon={state.icon} weather={state} lat={lat} lon={lon} />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Weather;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}